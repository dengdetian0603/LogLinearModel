tmp = post.mu.pi.ByBlock(K=K, mu.init=NULL, pi.init=PiInit , ParMatrix=Lmat, prior.alpha=1.15,
iter=7000, inner.iter=10, burnin=3000, inner.burnin=5, dat=measure, MH.par=c(rep(1.3,K),0.14))
traceback
traceback()
source("~/Documents/JHSPH/Research/S.Zeger/LogLinearModel/Code/ToolBox_PERCH.R")
library(MVB)
tmp = post.mu.pi.ByBlock(K=K, mu.init=NULL, pi.init=PiInit , ParMatrix=Lmat, prior.alpha=1.15,
iter=7000, inner.iter=10, burnin=3000, inner.burnin=5, dat=measure, MH.par=c(rep(1.3,K),0.14))
post.mu.pi.ByBlock = function(K, mu.init=NULL, pi.init, iter, inner.iter, burnin, inner.burnin, dat, MH.par=c(1,1,1,0.5), ParMatrix, prior.alpha)
{
y = BitoMulti(dat=dat,K=K)
posterior = matrix(NA, nrow=iter, ncol=2*K+1)
posterior[1,(K+1):(2*K+1)] = pi.init
PiMat = ParMatrix$PiMat
MuMat = ParMatrix$MuMat
J1 = ParMatrix$J1
tmp = xsample( E = PiMat, F = pi.init[-1]/pi.init[1], G = diag(rep(1,J1)), H = rep(0,J1),
iter = 50, output = 10, type = "cda")
mu.sample = MuMat%*%t(tmp$X)*pi.init[1]
posterior[1,1:K] = mu.sample[,2] # TODO: random init?
# beta0.mat = matrix(NA, nrow=iter, ncol=K)
# beta0.mat[1,] = log(posterior[1,1:K]/(1-posterior[1,1:K]))
accept_track = matrix(0, nrow=iter, ncol=2)
accept_track[1,] = rep(1, 2)
alpha_track = accept_track
mu.candidate = posterior[1,1:K]
pi.candidate = posterior[1,(K+1):(2*K+1)]
for (i in 2:iter)
{
posterior[i,1:K] = mu.candidate
posterior[i,(K+1):(2*K+1)] = pi.candidate
if (i%%25 == 0) print(c(i,posterior[i,]))
# sample mu
tmp = xsample( E = PiMat, F = pi.candidate[-1]/pi.candidate[1], G = diag(rep(1,J1)), H = rep(0,J1),
iter = 50, output = 40, type = "cda")
mu.sample = MuMat%*%t(tmp$X)*pi.candidate[1]
mu.candidate = mu.sample[,sample(1:40,1)]
log.alpha = density.YMuPi(K=K, y=y, mu=mu.candidate,pi=pi.candidate, SigmaInPrior=rep(1.6,3), AlphaInPrior=prior.alpha,
logscale=TRUE, inner.burnin=inner.burnin, inner.iter=inner.iter, method="cda", ParMat=ParMatrix) -
density.YMuPi(K=K, y=y, mu=posterior[i,1:K],pi=pi.candidate, SigmaInPrior=rep(1.6,3), AlphaInPrior=prior.alpha,
logscale=TRUE, inner.burnin=inner.burnin, inner.iter=inner.iter, method="cda", ParMat=ParMatrix)
alpha_track[i,1] = exp(log.alpha)
ratio = min(1,alpha_track[i,1])
u = runif(1)
if(u <= ratio) # accept
{
posterior[i,1:K] = mu.candidate
accept_track[i,1] = 1
}
else # reject
{
mu.candidate = posterior[i,1:K] # reset candidate
}
#beta0.mat[i,] = log(posterior[i,1:K]/(1-posterior[i,1:K]))
# sample pi0
#print("checkmark1")
pi0.candidate = posterior[i-1,K+1]+rnorm(1,0,MH.par[K+1])
if (pi0.candidate >= 1-max(mu.candidate) | pi0.candidate<=max(0, 1-sum(mu.candidate)))
{
# reject
pi.candidate = posterior[i,(K+1):(2*K+1)]
}
else
{
#print("checkmark2")
Phis = xsample( E = rbind(rep(1,2^K-1),MuMat), F = c(1-pi0.candidate,posterior[i,1:K])/pi0.candidate, G = diag(rep(1,J1)), H = rep(0,J1),
iter = 50, output = 40, type = "cda")
pi.sample = PiMat%*%t(Phis$X)*pi0.candidate
pi.candidate = c(pi0.candidate, pi.sample[,sample(1:40,1)])
log.alpha = density.YMuPi(K=K, y=y, mu=mu.candidate,pi=pi.candidate, SigmaInPrior=rep(1.6,3), AlphaInPrior=prior.alpha,
logscale=TRUE, inner.burnin=inner.burnin, inner.iter=inner.iter, method="cda", ParMat=ParMatrix) -
density.YMuPi(K=K, y=y, mu=mu.candidate,pi=posterior[i,(K+1):(2*K+1)], SigmaInPrior=rep(1.6,3), AlphaInPrior=prior.alpha,
logscale=TRUE, inner.burnin=inner.burnin, inner.iter=inner.iter, method="cda", ParMat=ParMatrix)
alpha_track[i,2] = exp(log.alpha)
ratio = min(1,alpha_track[i,2])
u = runif(1)
#print("checkmark3")
if(u <= ratio) # accept
{
posterior[i, (K+1):(2*K+1)] = pi.candidate
accept_track[i,2] = 1
}
else # reject
{
pi.candidate = posterior[i,(K+1):(2*K+1)]
}
}
#print("checkmark4")
}
colnames(posterior) = c(paste0("Mu_",1:K), paste0("Pi_",0:K))
list(posterior = posterior[-(1:burnin),], history.alpha = alpha_track[-(1:burnin),],
history.accept = accept_track[-(1:burnin),])
}
post.mu.pi.ByBlock = function(K, mu.init=NULL, pi.init, iter, inner.iter, burnin, inner.burnin, dat, MH.par=c(1,1,1,0.5), ParMatrix, prior.alpha)
{
y = BitoMulti(dat=dat,K=K)
posterior = matrix(NA, nrow=iter, ncol=2*K+1)
posterior[1,(K+1):(2*K+1)] = pi.init
PiMat = ParMatrix$PiMat
MuMat = ParMatrix$MuMat
J1 = ParMatrix$J1
tmp = xsample( E = PiMat, F = pi.init[-1]/pi.init[1], G = diag(rep(1,J1)), H = rep(0,J1),
iter = 50, output = 10, type = "cda")
mu.sample = MuMat%*%t(tmp$X)*pi.init[1]
posterior[1,1:K] = mu.sample[,2] # TODO: random init?
# beta0.mat = matrix(NA, nrow=iter, ncol=K)
# beta0.mat[1,] = log(posterior[1,1:K]/(1-posterior[1,1:K]))
accept_track = matrix(0, nrow=iter, ncol=2)
accept_track[1,] = rep(1, 2)
alpha_track = accept_track
mu.candidate = posterior[1,1:K]
pi.candidate = posterior[1,(K+1):(2*K+1)]
for (i in 2:iter)
{
posterior[i,1:K] = mu.candidate
posterior[i,(K+1):(2*K+1)] = pi.candidate
if (i%%25 == 0) print(c(i,posterior[i,]))
# sample mu
tmp = xsample( E = PiMat, F = pi.candidate[-1]/pi.candidate[1], G = diag(rep(1,J1)), H = rep(0,J1),
iter = 50, output = 40, type = "cda")
mu.sample = MuMat%*%t(tmp$X)*pi.candidate[1]
mu.candidate = mu.sample[,sample(1:40,1)]
log.alpha = density.YMuPi(K=K, y=y, mu=mu.candidate,pi=pi.candidate, SigmaInPrior=rep(1.6,K), AlphaInPrior=prior.alpha,
logscale=TRUE, inner.burnin=inner.burnin, inner.iter=inner.iter, method="cda", ParMat=ParMatrix) -
density.YMuPi(K=K, y=y, mu=posterior[i,1:K],pi=pi.candidate, SigmaInPrior=rep(1.6,K), AlphaInPrior=prior.alpha,
logscale=TRUE, inner.burnin=inner.burnin, inner.iter=inner.iter, method="cda", ParMat=ParMatrix)
alpha_track[i,1] = exp(log.alpha)
ratio = min(1,alpha_track[i,1])
u = runif(1)
if(u <= ratio) # accept
{
posterior[i,1:K] = mu.candidate
accept_track[i,1] = 1
}
else # reject
{
mu.candidate = posterior[i,1:K] # reset candidate
}
#beta0.mat[i,] = log(posterior[i,1:K]/(1-posterior[i,1:K]))
# sample pi0
#print("checkmark1")
pi0.candidate = posterior[i-1,K+1]+rnorm(1,0,MH.par[K+1])
if (pi0.candidate >= 1-max(mu.candidate) | pi0.candidate<=max(0, 1-sum(mu.candidate)))
{
# reject
pi.candidate = posterior[i,(K+1):(2*K+1)]
}
else
{
#print("checkmark2")
Phis = xsample( E = rbind(rep(1,2^K-1),MuMat), F = c(1-pi0.candidate,posterior[i,1:K])/pi0.candidate, G = diag(rep(1,J1)), H = rep(0,J1),
iter = 50, output = 40, type = "cda")
pi.sample = PiMat%*%t(Phis$X)*pi0.candidate
pi.candidate = c(pi0.candidate, pi.sample[,sample(1:40,1)])
log.alpha = density.YMuPi(K=K, y=y, mu=mu.candidate,pi=pi.candidate, SigmaInPrior=rep(1.6,K), AlphaInPrior=prior.alpha,
logscale=TRUE, inner.burnin=inner.burnin, inner.iter=inner.iter, method="cda", ParMat=ParMatrix) -
density.YMuPi(K=K, y=y, mu=mu.candidate,pi=posterior[i,(K+1):(2*K+1)], SigmaInPrior=rep(1.6,K), AlphaInPrior=prior.alpha,
logscale=TRUE, inner.burnin=inner.burnin, inner.iter=inner.iter, method="cda", ParMat=ParMatrix)
alpha_track[i,2] = exp(log.alpha)
ratio = min(1,alpha_track[i,2])
u = runif(1)
#print("checkmark3")
if(u <= ratio) # accept
{
posterior[i, (K+1):(2*K+1)] = pi.candidate
accept_track[i,2] = 1
}
else # reject
{
pi.candidate = posterior[i,(K+1):(2*K+1)]
}
}
#print("checkmark4")
}
colnames(posterior) = c(paste0("Mu_",1:K), paste0("Pi_",0:K))
list(posterior = posterior[-(1:burnin),], history.alpha = alpha_track[-(1:burnin),],
history.accept = accept_track[-(1:burnin),])
}
tmp = post.mu.pi.ByBlock(K=K, mu.init=NULL, pi.init=PiInit , ParMatrix=Lmat, prior.alpha=1.15,
iter=7000, inner.iter=10, burnin=3000, inner.burnin=5, dat=measure, MH.par=c(rep(1.3,K),0.14))
y = BitoMulti(dat=dat,K=K)
PiMat = ParMatrix$PiMat
MuMat = ParMatrix$MuMat
J1 = ParMatrix$J1
ParMatrix=Lmat
PiMat = ParMatrix$PiMat
MuMat = ParMatrix$MuMat
J1 = ParMatrix$J1
J1
pi.init=PiInit
tmp = xsample( E = PiMat, F = pi.init[-1]/pi.init[1], G = diag(rep(1,J1)), H = rep(0,J1),
iter = 15, output = 10, type = "cda")
mu.sample = MuMat%*%t(tmp$X)*pi.init[1]
mu.sample
tmp = xsample( E = PiMat, F = pi.init[-1]/pi.init[1], G = diag(rep(1,J1)), H = rep(0,J1),
iter = 15, output = 10, type = "rda")
mu.sample = MuMat%*%t(tmp$X)*pi.init[1]
posterior[1,1:K] = mu.sample[,2]
mu.sample
tmp = xsample( E = PiMat, F = pi.init[-1]/pi.init[1], G = diag(rep(1,J1)), H = rep(0,J1),
iter = 15, output = 10, type = "mirror")
mu.sample = MuMat%*%t(tmp$X)*pi.init[1]
mu.sample
tmp = xsample( E = PiMat, F = pi.init[-1]/pi.init[1], G = diag(rep(1,J1)), H = rep(0,J1),
iter = 15, output = 10, type = "cda")
mu.sample = MuMat%*%t(tmp$X)*pi.init[1]
mu.sample
tmp = xsample( E = PiMat, F = pi.init[-1]/pi.init[1], G = diag(rep(1,J1)), H = rep(0,J1),
iter = 10, output = 5, type = "cda")
mu.sample = MuMat%*%t(tmp$X)*pi.init[1]
mu.sample
post.mu.pi.ByBlock = function(K, mu.init=NULL, pi.init, iter, inner.iter, burnin, inner.burnin, dat, MH.par=c(1,1,1,0.5), ParMatrix, prior.alpha)
{
y = BitoMulti(dat=dat,K=K)
posterior = matrix(NA, nrow=iter, ncol=2*K+1)
posterior[1,(K+1):(2*K+1)] = pi.init
PiMat = ParMatrix$PiMat
MuMat = ParMatrix$MuMat
J1 = ParMatrix$J1
tmp = xsample( E = PiMat, F = pi.init[-1]/pi.init[1], G = diag(rep(1,J1)), H = rep(0,J1),
iter = 10, output = 5, type = "cda")
mu.sample = MuMat%*%t(tmp$X)*pi.init[1]
posterior[1,1:K] = mu.sample[,2] # TODO: random init?
# beta0.mat = matrix(NA, nrow=iter, ncol=K)
# beta0.mat[1,] = log(posterior[1,1:K]/(1-posterior[1,1:K]))
accept_track = matrix(0, nrow=iter, ncol=2)
accept_track[1,] = rep(1, 2)
alpha_track = accept_track
mu.candidate = posterior[1,1:K]
pi.candidate = posterior[1,(K+1):(2*K+1)]
message("Start block M-H sampling...")
for (i in 2:iter)
{
posterior[i,1:K] = mu.candidate
posterior[i,(K+1):(2*K+1)] = pi.candidate
print(i)
if (i%%25 == 0) print(c(i,posterior[i,]))
# sample mu
tmp = xsample( E = PiMat, F = pi.candidate[-1]/pi.candidate[1], G = diag(rep(1,J1)), H = rep(0,J1),
iter = 50, output = 40, type = "cda")
mu.sample = MuMat%*%t(tmp$X)*pi.candidate[1]
mu.candidate = mu.sample[,sample(1:40,1)]
log.alpha = density.YMuPi(K=K, y=y, mu=mu.candidate,pi=pi.candidate, SigmaInPrior=rep(1.6,K), AlphaInPrior=prior.alpha,
logscale=TRUE, inner.burnin=inner.burnin, inner.iter=inner.iter, method="cda", ParMat=ParMatrix) -
density.YMuPi(K=K, y=y, mu=posterior[i,1:K],pi=pi.candidate, SigmaInPrior=rep(1.6,K), AlphaInPrior=prior.alpha,
logscale=TRUE, inner.burnin=inner.burnin, inner.iter=inner.iter, method="cda", ParMat=ParMatrix)
alpha_track[i,1] = exp(log.alpha)
ratio = min(1,alpha_track[i,1])
u = runif(1)
if(u <= ratio) # accept
{
posterior[i,1:K] = mu.candidate
accept_track[i,1] = 1
}
else # reject
{
mu.candidate = posterior[i,1:K] # reset candidate
}
#beta0.mat[i,] = log(posterior[i,1:K]/(1-posterior[i,1:K]))
# sample pi0
#print("checkmark1")
pi0.candidate = posterior[i-1,K+1]+rnorm(1,0,MH.par[K+1])
if (pi0.candidate >= 1-max(mu.candidate) | pi0.candidate<=max(0, 1-sum(mu.candidate)))
{
# reject
pi.candidate = posterior[i,(K+1):(2*K+1)]
}
else
{
#print("checkmark2")
Phis = xsample( E = rbind(rep(1,2^K-1),MuMat), F = c(1-pi0.candidate,posterior[i,1:K])/pi0.candidate, G = diag(rep(1,J1)), H = rep(0,J1),
iter = 50, output = 40, type = "cda")
pi.sample = PiMat%*%t(Phis$X)*pi0.candidate
pi.candidate = c(pi0.candidate, pi.sample[,sample(1:40,1)])
log.alpha = density.YMuPi(K=K, y=y, mu=mu.candidate,pi=pi.candidate, SigmaInPrior=rep(1.6,K), AlphaInPrior=prior.alpha,
logscale=TRUE, inner.burnin=inner.burnin, inner.iter=inner.iter, method="cda", ParMat=ParMatrix) -
density.YMuPi(K=K, y=y, mu=mu.candidate,pi=posterior[i,(K+1):(2*K+1)], SigmaInPrior=rep(1.6,K), AlphaInPrior=prior.alpha,
logscale=TRUE, inner.burnin=inner.burnin, inner.iter=inner.iter, method="cda", ParMat=ParMatrix)
alpha_track[i,2] = exp(log.alpha)
ratio = min(1,alpha_track[i,2])
u = runif(1)
#print("checkmark3")
if(u <= ratio) # accept
{
posterior[i, (K+1):(2*K+1)] = pi.candidate
accept_track[i,2] = 1
}
else # reject
{
pi.candidate = posterior[i,(K+1):(2*K+1)]
}
}
#print("checkmark4")
}
colnames(posterior) = c(paste0("Mu_",1:K), paste0("Pi_",0:K))
list(posterior = posterior[-(1:burnin),], history.alpha = alpha_track[-(1:burnin),],
history.accept = accept_track[-(1:burnin),])
}
tmp = post.mu.pi.ByBlock(K=K, mu.init=NULL, pi.init=PiInit , ParMatrix=Lmat, prior.alpha=1.15,
iter=7000, inner.iter=10, burnin=3000, inner.burnin=5, dat=measure, MH.par=c(rep(1.3,K),0.14))
load("~/Documents/workspace/Iter4500_dat_5.RData")
tmp = Posterior
tmp$history.accept
apply(tmp$history.accept[1:4000,],2,mean)
apply(tmp$history.accept[2000:4000,],2,mean)
library(coda)
mu.chain = mcmc(tmp$posterior[,1:15])
summary(mu.chain)
tmp$posterior
mu.chain = mcmc(tmp$posterior)
summary(mu.chain)
plot(mu.chain)
mu.chain = mcmc(tmp$posterior[2000:4000,])
summary(mu.chain)
plot(mu.chain)
autocorr.plot(mu.chain)
est.compare
round(summary(mu.chain)$statistics[,1],3)
apply(tmp$history.accept[3000:4000,],2,mean)
mu.chain = mcmc(tmp$posterior[3000:4000,])
summary(mu.chain)
plot(mu.chain)
#---------------------- Chain Diagonosis -------------------------------- #
load("~/Documents/workspace/Iter4500_dat_7.RData")
tmp = Posterior
apply(tmp$history.accept[3000:4000,],2,mean)
mu.chain = mcmc(tmp$posterior[3000:4000,])
summary(mu.chain)
plot(mu.chain)
load("~/Documents/workspace/Iter4500_dat_5.RData")
load("~/Documents/workspace/Iter4500_dat_7.RData")
tmp2 = Posterior
apply(tmp2$history.accept[3000:4000,],2,mean)
mu.chain2 = mcmc(tmp2$posterior[3000:4000,])
library(coda)
mu.chain2
mu.chain2 = mcmc(tmp2$posterior[3000:4000,])
load("~/Documents/workspace/Iter4500_dat_6.RData")
tmp1 = Posterior
apply(tmp1$history.accept[3000:4000,],2,mean)
mu.chain1 = mcmc(tmp1$posterior[3000:4000,])
combinedchains = mcmc.list(mu.chain1, mu.chain2)
plot(combinedchains)
gelman.diag(combinedchains)
rm(Posterior)
load("~/Documents/workspace/Iter4500_dat_7.RData")
tmp2 = Posterior
apply(tmp2$history.accept[3000:4000,],2,mean)
mu.chain2 = mcmc(tmp2$posterior[3000:4000,])
combinedchains = mcmc.list(mu.chain1[,1], mu.chain2[,1])
plot(combinedchains)
gelman.diag(combinedchains)
mu.chain1[,1]
mu.chain2[,1]
load("~/Documents/workspace/Iter4500_dat_6.RData")
tmp1 = Posterior
apply(tmp1$history.accept[3000:4000,],2,mean)
rm(Posterior)
load("~/Documents/workspace/Iter4500_dat_6.RData")
tmp1 = Posterior
apply(tmp1$history.accept[3000:4000,],2,mean)
mu.chain1 = mcmc(tmp1$posterior[3000:4000,])
rm(Posterior)
load("~/Documents/workspace/Iter4500_dat_7.RData")
tmp2 = Posterior
apply(tmp2$history.accept[3000:4000,],2,mean)
load("~/Documents/workspace/Iter4500_dat_5.RData")
tmp = Posterior
apply(tmp$history.accept[3000:4000,],2,mean)
library(coda)
mc.chain = mcmc(tmp$posterior[3000:4000,])
est.compare
mc.est = round(summary(mc.chain)$statistics[,1],3)
est.compare[,3] = mc.est
est.compare
chain1 =  mcmc(tmp$posterior[1:2000,1])
chain2 =  mcmc(tmp$posterior[-(1:2000),1])
combinedchains = mcmc.list(chain1, chain2)
plot(combinedchains)
gelman.diag(combinedchains)
gelman.plot(combinedchains)
chain1 =  mcmc(tmp$posterior[1:2000,1:3])
chain2 =  mcmc(tmp$posterior[-(1:2000),1:3])
combinedchains = mcmc.list(chain1, chain2)
plot(combinedchains)
gelman.diag(combinedchains)
chain1 =  mcmc(tmp$posterior[1:2000,1:6])
chain2 =  mcmc(tmp$posterior[-(1:2000),1:6])
combinedchains = mcmc.list(chain1, chain2)
#plot(combinedchains)
gelman.diag(combinedchains)
chain1 =  mcmc(tmp$posterior[1:2000,1:5])
chain2 =  mcmc(tmp$posterior[-(1:2000),1:5])
combinedchains = mcmc.list(chain1, chain2)
#plot(combinedchains)
gelman.diag(combinedchains)
chain1 =  mcmc(tmp$posterior[1:2000,1:4])
chain2 =  mcmc(tmp$posterior[-(1:2000),1:4])
combinedchains = mcmc.list(chain1, chain2)
#plot(combinedchains)
gelman.diag(combinedchains)
chain1 =  mcmc(tmp$posterior[1:2000,-(1:4)])
chain2 =  mcmc(tmp$posterior[-(1:2000),-(1:4)])
combinedchains = mcmc.list(chain1, chain2)
#plot(combinedchains)
gelman.diag(combinedchains)
chain1 =  mcmc(tmp$posterior[1:2000,-(1:4)])
chain2 =  mcmc(tmp$posterior[-(1:2000),-(1:4)])
combinedchains = mcmc.list(chain1, chain2)
#plot(combinedchains)
gelman.diag(combinedchains)
gelman.plot(combinedchains)
source("~/Documents/JHSPH/Research/S.Zeger/LogLinearModel/Code/ToolBox_PERCH.R")
library(limSolve)
library(doMC)
library(foreach)
load("~/Documents/workspace/Iter10000_dat_3_init2.RData")
tmp = Posterior
apply(tmp$history.accept[3000:4000,],2,mean)
apply(tmp$history.accept[3000:10000,],2,mean)
library(coda)
mc.chain = mcmc(tmp$posterior[3000:10000,])
plot(mc.chain)
?mcmc
mc.chain = mcmc(tmp$posterior[3000:10000,],thin=5)
plot(mc.chain)
load("~/Documents/workspace/Iter10000_dat_4_init2.RData")
tmp = Posterior
apply(tmp$history.accept[3000:10000,],2,mean)
library(coda)
mc.chain = mcmc(tmp$posterior[3000:10000,],thin=5)
plot(mc.chain)
plot(mc.chain)
mc.chain = mcmc(tmp$posterior[3000:10000,],thin=1)
plot(mc.chain)
apply(tmp$history.accept[6000:10000,],2,mean)
library(coda)
mc.chain = mcmc(tmp$posterior[6000:10000,],thin=1)
plot(mc.chain)
load("~/Desktop/DatCleanedAndImputed.new.RData")
ls()
Dat.X_clean_imputed_1.new = Dat.X_clean_imputed_1
Dat.X_clean_imputed_2.new = Dat.X_clean_imputed_2
load("~/Desktop/Archive0826/Data/DatCleanedAndImputed.RData")
Dat.X_clean_imputed_1
identical(Dat.X_clean_imputed_1, Dat.X_clean_imputed_1.new)
load("~/Desktop/SimDat_K5n300.RData")
prior = priorsamples
layout(matrix(1:2,ncol=1))
par(mar=c(2,4,1,1))
plot(density(prior[,1],adjust=1.8), xlab="value of parameter", xlim=c(0,1),main="Posterior Density", ylim=c(0,7.5))
lines(density(prior[,2],adjust=1.8),col=2)
lines(density(prior[,3],adjust=1.8),col=4)
legend("topright",legend=c(paste0("Mu1 : ",round(mean(prior[,1]),3)),
paste0("Mu2 : ",round(mean(prior[,2]),3)),
paste0("Mu3 : ",round(mean(prior[,3]),3))),
lty=1, col=c(1,2,4))
plot(density(prior[,K+1],adjust=1.8), xlab="value of parameter", xlim=c(0,1), ylim=c(0,6), main="Posterior Density")
lines(density(prior[,K+2],adjust=1.8),col=2)
lines(density(prior[,K+3],adjust=1.8),col=4)
lines(density(prior[,K+4],adjust=1.8),col=3)
legend("topright",legend=c(paste0("Pi0 : ",round(mean(prior[,K+1]),3)),
paste0("Pi1 : ",round(mean(prior[,K+2]),3)),
paste0("Pi2 : ",round(mean(prior[,K+3]),3)),
paste0("Pi3 : ",round(mean(prior[,K+4]),3))),
lty=1, col=c(1,2,4,3))
layout(matrix(1))
layout(matrix(1:2,ncol=1))
par(mar=c(2,4,1,1))
plot(density(prior[,1],adjust=1.8), xlab="value of parameter", xlim=c(0,1),main="Posterior Density", ylim=c(0,7.5))
lines(density(prior[,2],adjust=1.8),col=2)
lines(density(prior[,3],adjust=1.8),col=4)
legend("topright",legend=c(paste0("Mu1 : ",round(mean(prior[,1]),3)),
paste0("Mu2 : ",round(mean(prior[,2]),3)),
paste0("Mu3 : ",round(mean(prior[,3]),3))),
lty=1, col=c(1,2,4))
plot(density(prior[,K+1],adjust=1.8), xlab="value of parameter", xlim=c(0,1), ylim=c(0,6), main="Posterior Density")
lines(density(prior[,K+2],adjust=1.8),col=2)
lines(density(prior[,K+3],adjust=1.8),col=4)
lines(density(prior[,K+4],adjust=1.8),col=3)
lines(density(prior[,K+5],adjust=1.8),col=5)
legend("topright",legend=c(paste0("Pi0 : ",round(mean(prior[,K+1]),3)),
paste0("Pi1 : ",round(mean(prior[,K+2]),3)),
paste0("Pi2 : ",round(mean(prior[,K+3]),3)),
paste0("Pi3 : ",round(mean(prior[,K+4]),3)),
paste0("Pi4 : ",round(mean(prior[,K+5]),3))),
lty=1, col=c(1,2,4,3,5))
layout(matrix(1))
hist(prior[,10])
load("~/Documents/workspace/mu_0.12pi0_0.05pi_0.35.RData")
tmp = Posterior
apply(tmp$history.accept[1000:5000,],2,mean)
library(coda)
mc.chain = mcmc(tmp$posterior[1000:5000,],thin=1)
plot(mc.chain)
install.packages("coda")
library(coda)
mc.chain = mcmc(tmp$posterior[1000:5000,],thin=1)
plot(mc.chain)
est.compare
round(summary(mc.chain)$statistics[,1],3)
mc.est = round(summary(mc.chain)$statistics[,1],3)
est.compare[,3] = mc.est
install.packages("knitr")
install.packages("yaml")
install.packages("htmltools")
setwd("~/Documents/JHSPH/Research/S.Zeger/LogLinearModel/meet150804")
library(knitr)
knit2html("Chains.Rmd")
knit2html("Chains.Rmd")
knit2html("Chains.Rmd")
install.packages(c("boot", "class", "cluster", "foreign", "KernSmooth", "manipulate", "MASS", "nlme", "nnet", "rmarkdown", "rpart", "spatial", "survival"))
