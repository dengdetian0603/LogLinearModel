text(x=27.2,y=24,labels=paste("MSE =",round(MSE1,3)),col="blue")
text(x=27.2,y=23.7,labels=paste("MSE =",round(MSE2,3)),col="red")
Y.hat = c()
for (i in unique(subject))
{
model.i = glm(Y~month,data=BMI.data[which(subject==i & month<9),])
Y.hat[i] = predict(model.i,newdata = data.frame(month=9))
}
Y.9m = BMI.data$Y[which(month==9)]
MSE1 = mean((Y.hat-Y.9m)^2)
# pooled model
library(lme4)
fit3 = lmer(Y ~ month + (month|subject), data=BMI.data[which(BMI.data$month<9),])
Y.hat2 = predict(fit3, newdata=data.frame(subject=1:50,month=rep(9,50)))
MSE2 = mean((Y.hat2-Y.9m)^2)
Y.hat = c()
for (i in unique(subject))
{
model.i = glm(Y~month,data=BMI.data[which(BMI.data$subject==i & month<9),])
Y.hat[i] = predict(model.i,newdata = data.frame(month=9))
}
Y.9m = BMI.data$Y[which(month==9)]
MSE1 = mean((Y.hat-Y.9m)^2)
Y.hat = c()
for (i in unique(subject))
{
model.i = glm(Y~month,data=BMI.data[which(BMI.data$subject==i & month<9),])
Y.hat[i] = predict(model.i,newdata = data.frame(month=9))
}
Y.hat = c()
for (i in unique(subject))
{
model.i = glm(Y~month,data=BMI.data[which(BMI.data$subject==i & BMI.data$month<9),])
Y.hat[i] = predict(model.i,newdata = data.frame(month=9))
}
Y.hat = c()
for (i in 1:50)
{
model.i = glm(Y~month,data=BMI.data[which(BMI.data$subject==i & BMI.data$month<9),])
Y.hat[i] = predict(model.i,newdata = data.frame(month=9))
}
Y.9m = BMI.data$Y[which(BMI.data$month==9)]
MSE1 = mean((Y.hat-Y.9m)^2)
MSE1
library(lme4)
fit3 = lmer(Y ~ month + (month|subject), data=BMI.data[which(BMI.data$month<9),])
Y.hat2 = predict(fit3, newdata=data.frame(subject=1:50,month=rep(9,50)))
MSE2 = mean((Y.hat2-Y.9m)^2)
MSE2
plot(Y.9m, Y.hat, xlab="BMI at month 9", ylab="Predicted BMI at month 9",col="blue")
points(Y.9m,Y.hat2,col="red")
abline(a=0,b=1,pch=2)
legend("bottomright",legend=c("using individual data","using all data"),col=c("blue","red"),pch=1)
text(x=27.2,y=24,labels=paste("MSE =",round(MSE1,3)),col="blue")
text(x=27.2,y=23.7,labels=paste("MSE =",round(MSE2,3)),col="red")
Y.hat = c()
for (i in unique(subject))
{
model.i = glm(Y~month,data=BMI.data,subset=intersect(train.index,which(BMI.data$subject==i)))
Y.hat[((i-1)*3+1):(3*i)] = predict(model.i,
newdata = BMI.data[intersect(test.index,which(BMI.data$subject==i)),])
}
Y.hat = c()
for (i in 1:50)
{
model.i = glm(Y~month,data=BMI.data,subset=intersect(train.index,which(BMI.data$subject==i)))
Y.hat[((i-1)*3+1):(3*i)] = predict(model.i,
newdata = BMI.data[intersect(test.index,which(BMI.data$subject==i)),])
}
Y.test = BMI.data$Y[test.index]
MSE1 = mean((Y.hat-Y.test)^2)
MSE1
fit4 = lmer(Y ~ month + (month|subject), data=BMI.data[train.index,])
MSE2 = mean((Y.hat2-Y.test)^2)
MSE2
Y.hat2 = predict(fit4, newdata=BMI.data[test.index,])
MSE2 = mean((Y.hat2-Y.test)^2)
MSE2
plot(Y.test, Y.hat, xlab="BMI at month 9", ylab="Predicted BMI at month 9",col="blue")
points(Y.test,Y.hat2,col="red")
abline(a=0,b=1,pch=2)
legend("bottomright",legend=c("using individual data","using all data"),col=c("blue","red"),pch=1)
text(x=27.2,y=24,labels=paste("MSE =",round(MSE1,3)),col="blue")
text(x=27.2,y=23.7,labels=paste("MSE =",round(MSE2,3)),col="red")
plot(Y.test, Y.hat, xlab="BMI at month 9", ylab="Predicted BMI at month 9",col="blue")
points(Y.test,Y.hat2,col="red")
abline(a=0,b=1,pch=2)
legend("bottomright",legend=c("using individual data","using all data"),col=c("blue","red"),pch=1)
text(x=27.2,y=21,labels=paste("MSE =",round(MSE1,3)),col="blue")
text(x=27.2,y=20.5,labels=paste("MSE =",round(MSE2,3)),col="red")
setwd("~/Google Drive/PhD coursework/Course Materials/Adv Biostat Methds/755-756/Homeworks/755_project")
BMI.data = read.table("BMI_data.txt", header = T)
library(geepack)
library(nlme)
# a) GEE models
attach(BMI.data)
gee.ind = geeglm(Y~month,corstr="independence",id = subject)
summary(gee.ind)
gee.ex= geeglm(Y~month,corstr="exchange",id = subject)
summary(gee.ex)
gee.ar= geeglm(Y~month,corstr="ar1",id = subject)
summary(gee.ar)
gee.uns = geeglm(Y~month,corstr="unstructured",id = subject)
summary(gee.uns)
?geeglm
gee.ex= geeglm(Y~month,corstr="exchange",id = subject,std.err="san.se")
summary(gee.ex)
gee.ind = geeglm(Y~month,corstr="independence",id = subject)
summary(gee.ind)
??geeglm
gee.ind
vcov(gee.ex)
?geepack
??geepack
anova(gee.ex)
gee.ex$var
var(gee.ex)
vcov(gee.ex)
vcov(gee.ex,working)
vcov(gee.ex,"working")
?glm
glm(Y~month)
summary(glm(Y~month))
Y.ex.pred = predict(gee.ex,newdata=BMI.data)
Y.ex.pred
resid = Y-Y.ex.pred
resid = matrix(Y-Y.ex.pred,nrow=50,ncol=9)
corr(resid)
cor(resid)
library("gee", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
tmp= gee(Y~month,corstr="exchange",id = subject)
summary(tmp)
tmp= gee(Y~month,corstr="exchangeable",id = subject)
summary(tmp)
View(BMI.data)
resid = t(matrix(Y-Y.ex.pred,nrow=9,ncol=50))
cor(resid)
library(xtable)
xtable(cor(resid))
cor(resid)
gee.fix = geeglm(Y~month,corstr="userdefined",id = subject,std.err="san.se",zcor=cor(resid))
summary(gee.fix)
nrow(cor(resid))
cor.fix = fixed2Zcor(cor(resid), id=subject, waves=month)
cor.fix
gee.fix = geeglm(Y~month,corstr="userdefined",id = subject,zcor=cor.fix)
summary(gee.fix)
pnorm(0)
?integral
?integ
??integ
??integration
??integrate
AREc = function(c)
{
func = function(u) {u^2*dnorm(u)}
c = abs(c)
denom = 2*c^2*pnorm(-c) + integrate(f=func(),lower=-c,upper=c)
numer = (pnorm(c)-pnorm(-c))^2
}
AREc(0.1)
func = function(u) {(u^2)*dnorm(u)}
AREc = function(c)
{
c = abs(c)
denom = 2*c^2*pnorm(-c) + integrate(f=func,lower=-c,upper=c)
numer = (pnorm(c)-pnorm(-c))^2
}
AREc(0.1)
func = function(u) {(u^2)*dnorm(u)}
AREc = function(c)
{
c = abs(c)
denom = 2*c*c*pnorm(-c) + integrate(f=func,lower=-c,upper=c)
numer = (pnorm(c)-pnorm(-c))^2
numer/denom
}
AREc(0.1)
integrate(f=func,lower=-1,upper=1)
integrate(f=func,lower=-1,upper=1)->tmp
class(tmp)
as.numeric(tmp)
AREc = function(c)
{
c = abs(c)
denom = 2*c*c*pnorm(-c) + integrate(f=func,lower=-c,upper=c)$value
numer = (pnorm(c)-pnorm(-c))^2
numer/denom
}
AREc(0.1)
AREc(c(0.1,0.2))
c=seq(0.1e-4, 2,1e-5)
c=seq(0.1e-3, 2,1e-4)
plot(c,AREc(c),lty=1)
plot(c,AREc(c),type="line")
?plot
c=seq(0.1e-2, 4,1e-3)
ARE = AREc(c)
plot(c,ARE,type="l")
c=seq(0.1e-2, 3,1e-3)
ARE = AREc(c)
plot(c,ARE,type="l")
integrate(f=func,lower=-5,upper=5)$value
2*5*5*pnorm(-5)
AREc(5)
AREc(1:5)
AREc(1)
AREc(2)
AREc(3)
c=seq(0.1e-2, 3,1e-3)
ARE=c()
for(i in 1:length(c)) ARE[i] = AREc(c[i])
plot(c,ARE,type="l")
c=seq(0.1e-2, 5,1e-3)
ARE=c()
for(i in 1:length(c)) ARE[i] = AREc(c[i])
plot(c,ARE,type="l")
fit1 = lme(Y ~ month, random = ~1|subject)
summary(fit1)
fit2 = lme(Y ~ month,random =~ month|subject)
summary(fit2)
View(BMI.data)
summary(glm(Y~month:as.factor(subject)))
summary(glm(Y~month+as.factor(subject)+month*as.factor(subject)))
tmp = summary(glm(Y~month+as.factor(subject)+month*as.factor(subject)))
xtable(tmp)
tmp
fit1 = lme(Y ~ month, random = ~1|subject)
summary(fit1)
fit2 = lme(Y ~ month,random =~ month|subject)
summary(fit2)
coef(fit2)
names(fit2)
fit2$coefficients
fit1$coefficients
fit2$coefficients
fit2$coefficients$random
fit2$coefficients$random$subject->tmp
cov(tmp)
cor(tmp)
summary(fit2)
sqrt(cov(tmp))
names(fit2)
fit2$apVar
summary(fit2)
hist(ranef(fit2),breaks=20)
ranef(fit2)
hist(ranef(fit2)[,1],breaks=20)
hist(ranef(fit2)$month,breaks=20)
layout(matrix(1:3,nrow=1))
hist(ranef(fit1)[,1],breaks=25)
hist(ranef(fit2)[,1],breaks=25)
hist(ranef(fit2)$month,breaks=25)
layout(matrix(1,nrow=1))
layout(matrix(1:3,nrow=1))
hist(ranef(fit1)[,1],breaks=20)
hist(ranef(fit2)[,1],breaks=20)
hist(ranef(fit2)$month,breaks=20)
layout(matrix(1,nrow=1))
layout(matrix(1:3,nrow=1))
hist(ranef(fit1)[,1],breaks=20)
lines(density(ranef(fit1)[,1]))
hist(ranef(fit2)[,1],breaks=20)
hist(ranef(fit2)$month,breaks=20)
layout(matrix(1,nrow=1))
layout(matrix(1:3,nrow=1))
hist(ranef(fit1)[,1],breaks=20,frequency=FALSE)
lines(density(ranef(fit1)[,1]))
hist(ranef(fit2)[,1],breaks=20)
hist(ranef(fit2)$month,breaks=20)
layout(matrix(1,nrow=1))
?hist
layout(matrix(1:3,nrow=1))
hist(ranef(fit1)[,1],breaks=20, freq=FALSE)
lines(density(ranef(fit1)[,1]))
hist(ranef(fit2)[,1],breaks=20)
hist(ranef(fit2)$month,breaks=20)
layout(matrix(1,nrow=1))
layout(matrix(1:3,nrow=1))
hist(ranef(fit1)[,1],breaks=20, freq=FALSE)
lines(density(ranef(fit1)[,1]),col="red")
hist(ranef(fit2)[,1],breaks=20, freq=FALSE)
lines(density(ranef(fit2)[,1]),col="red")
hist(ranef(fit2)$month,breaks=20, freq=FALSE)
lines(density(ranef(fit2)[,2]),col="red")
layout(matrix(1,nrow=1))
layout(matrix(1:3,nrow=1))
hist(ranef(fit1)[,1],breaks=20, freq=FALSE, xlim=c(-5,5))
lines(density(ranef(fit1)[,1]),col="red")
hist(ranef(fit2)[,1],breaks=20, freq=FALSE, xlim=c(-5,5))
lines(density(ranef(fit2)[,1]),col="red")
hist(ranef(fit2)$month,breaks=20, freq=FALSE, xlim=c(-5,5))
lines(density(ranef(fit2)[,2]),col="red")
layout(matrix(1,nrow=1))
layout(matrix(1:3,nrow=1))
hist(ranef(fit1)[,1],breaks=20, freq=FALSE, xlim=c(-5,5))
lines(density(ranef(fit1)[,1]),col="red")
hist(ranef(fit2)[,1],breaks=20, freq=FALSE, xlim=c(-5,5))
lines(density(ranef(fit2)[,1]),col="red")
hist(ranef(fit2)$month,breaks=20, freq=FALSE, xlim=c(-0.02,0.02))
lines(density(ranef(fit2)[,2]),col="red")
layout(matrix(1,nrow=1))
#Predicting random effects
layout(matrix(1:3,nrow=1))
hist(ranef(fit1)[,1],breaks=20, freq=FALSE, xlim=c(-5,5),
main = "Random Intercept Model: random intercept estimates", xlab="estimates")
lines(density(ranef(fit1)[,1]),col="red")
hist(ranef(fit2)[,1],breaks=20, freq=FALSE, xlim=c(-5,5),
main = "Random Slope Model: random intercept estimates", xlab="estimates")
lines(density(ranef(fit2)[,1]),col="red")
hist(ranef(fit2)$month,breaks=20, freq=FALSE, xlim=c(-0.02,0.02),
main = "Random Slope Model: random slope estimates", xlab="estimates")
lines(density(ranef(fit2)[,2]),col="red")
layout(matrix(1,nrow=1))
layout(matrix(1:3,nrow=1))
hist(ranef(fit1)[,1],breaks=20, freq=FALSE, xlim=c(-5,5),
main = "Random Intercept Model", xlab="random intercept estimates")
lines(density(ranef(fit1)[,1]),col="red")
hist(ranef(fit2)[,1],breaks=20, freq=FALSE, xlim=c(-5,5),
main = "Random Slope Model", xlab="random intercept estimates")
lines(density(ranef(fit2)[,1]),col="red")
hist(ranef(fit2)$month,breaks=20, freq=FALSE, xlim=c(-0.02,0.02),
main = "Random Slope Model", xlab="random slope estimates")
lines(density(ranef(fit2)[,2]),col="red")
layout(matrix(1,nrow=1))
layout(matrix(1:3,nrow=1))
hist(ranef(fit1)[,1],breaks=20, freq=FALSE, xlim=c(-5,5),
main = "Random Intercept Model", xlab="random component: intercept")
lines(density(ranef(fit1)[,1]),col="red")
hist(ranef(fit2)[,1],breaks=20, freq=FALSE, xlim=c(-5,5),
main = "Random Slope Model", xlab="random component: intercept")
lines(density(ranef(fit2)[,1]),col="red")
hist(ranef(fit2)$month,breaks=20, freq=FALSE, xlim=c(-0.02,0.02),
main = "Random Slope Model", xlab="random component: month")
lines(density(ranef(fit2)[,2]),col="red")
layout(matrix(1,nrow=1))
names(tmp)
tmp = summary(glm(Y~month+as.factor(subject)+month*as.factor(subject)))
names(tmp)
tmp$coefficients
tmp$coefficients[3:51,]
tmp$coefficients[3:51,1]
mean(tmp$coefficients[3:51,1])+tmp$coefficients[1,1]
mean(tmp$coefficients[3:51,1])
tmp$coefficients[1,1]
round(mean(tmp$coefficients[3:51,1])+tmp$coefficients[1,1],3)
round(mean(tmp$coefficients[3:51,1])+tmp$coefficients[1,1],5)
mean(tmp$coefficients[3:51,1])+tmp$coefficients[1,1]
round(tmp$coefficients[1,1],5)
as.num(tmp$coefficients[1,1])
as.numeric(tmp$coefficients[1,1])
mean(tmp$coefficients[52:100,1])+tmp$coefficients[1,2]
mean(tmp$coefficients[52:100,1])+tmp$coefficients[2,1]
mean(tmp$coefficients[52:100,1])
require(RLRsim)
install.packages("RLRsim")
library("RLRsim")
exactLRT(fit1,fit2)
??LRT
exactRLRT(fit2)
fit2
exactRLRT(mA=fit2,m0=fit1)
exactRLRT(m=fit2,m0=fit1)
fit1 = lme(Y ~ month, random = ~1|subject)
fit2 = lme(Y ~ month,random =~ month|subject)
exactRLRT(m=fit2,mA=fit2,m0=fit1)
fit1 = lme(Y ~ month, random = ~1|subject,data=BMI.data)
fit2 = lme(Y ~ month,random =~ month|subject,data=BMI.data)
exactRLRT(m=fit2,mA=fit2,m0=fit1)
exactRLRT(m=fit2)
exactRLRT(mA=fit2,m0=fit1)
exactRLRT(m=update(fit1,.~.-(1|subject)),mA=fit2,m0=fit1)
anova(fit1,fit2)
xtable(anova(fit1,fit2))
detach(BMI.data)
Y.hat = c()
for (i in 1:50)
{
model.i = glm(Y~month,data=BMI.data[which(BMI.data$subject==i & BMI.data$month<9),])
Y.hat[i] = predict(model.i,newdata = data.frame(month=9))
}
Y.9m = BMI.data$Y[which(BMI.data$month==9)]
MSE1 = mean((Y.hat-Y.9m)^2)
setwd("~/Google Drive/PhD coursework/Course Materials/Adv Biostat Methds/755-756/Homeworks/755_project")
BMI.data = read.table("BMI_data.txt", header = T)
library(geepack)
library(nlme)
library(xtable)
Y.hat = c()
for (i in 1:50)
{
model.i = glm(Y~month,data=BMI.data[which(BMI.data$subject==i & BMI.data$month<9),])
Y.hat[i] = predict(model.i,newdata = data.frame(month=9))
}
Y.9m = BMI.data$Y[which(BMI.data$month==9)]
MSE1 = mean((Y.hat-Y.9m)^2)
library(lme4)
fit3 = lmer(Y ~ month + (1|subject), data=BMI.data[which(BMI.data$month<9),])
Y.hat2 = predict(fit3, newdata=data.frame(subject=1:50,month=rep(9,50)))
MSE2 = mean((Y.hat2-Y.9m)^2)
fit3 = lmer(Y ~ month + (month|subject), data=BMI.data[which(BMI.data$month<9),])
Y.hat2 = predict(fit3, newdata=data.frame(subject=1:50,month=rep(9,50)))
MSE2 = mean((Y.hat2-Y.9m)^2)
test.index = c()
for (i in 1:50)
{
tmp = sample(1:9,size=3) + 9*(i-1)
test.index = c(test.index,tmp)
}
train.index = setdiff(1:450,test.index)
Y.hat = c()
for (i in 1:50)
{
model.i = glm(Y~month,data=BMI.data,subset=intersect(train.index,which(BMI.data$subject==i)))
Y.hat[((i-1)*3+1):(3*i)] = predict(model.i,
newdata = BMI.data[intersect(test.index,which(BMI.data$subject==i)),])
}
Y.test = BMI.data$Y[test.index]
MSE1 = mean((Y.hat-Y.test)^2)
fit4 = lmer(Y ~ month + (month|subject), data=BMI.data[train.index,])
Y.hat2 = predict(fit4, newdata=BMI.data[test.index,])
MSE2 = mean((Y.hat2-Y.test)^2)
fit4 = lmer(Y ~ month + (1|subject), data=BMI.data[train.index,])
Y.hat2 = predict(fit4, newdata=BMI.data[test.index,])
MSE2 = mean((Y.hat2-Y.test)^2)
setwd("~/Documents/Johns Hopkins SPH/Research/EHRS_MU/data")
load("~/Documents/Johns Hopkins SPH/Research/EHRS_MU/data/AHA.CMS.v3.Rda")
source("~/Documents/Johns Hopkins SPH/Research/EHRS_MU/code/functions.R")
library(glmnet)
library(sandwich)
library(glmmML)
library(pROC)
set.seed(200)
temp = AHA.CMS.cah2[which(as.integer(AHA.CMS.cah2$CNTRL)<11),] # level 44 is order 11
for (j in 1:ncol(temp))
{
if(length(unique(temp[,j]))>10 & !(colnames(temp)[j] %in% c("CNTRL","SERV","MSTATE")))
{temp[,j] = as.numeric(temp[,j])}
else
{temp[,j] = factor(temp[,j])}
}
AHA.CMS.cah2.nonfed =temp
data0 = AHA.CMS.cah2.nonfed
model.bin(y.name="CM9")
model.num(y.name="CM1")
model.num(y.name="CM1")
source("~/Documents/Johns Hopkins SPH/Research/EHRS_MU/code/functions.R")
model.num(y.name="CM1")
model.num(y.name="MM2",RunMixed=FALSE)
load("~/Documents/Johns Hopkins SPH/Research/EHRS_MU/data/IT13.NA_filled.Rda")
temp0 = AHA.CMS.cah2[which(as.integer(AHA.CMS.cah2$CNTRL)<11),] # level 44 is order 11
temp = merge(temp0,IT13.Complete,by="AHAID")
for (j in 1:ncol(temp))
{
if(length(unique(temp[,j]))>20 & !(colnames(temp)[j] %in% c("CNTRL","SERV","MSTATE")))
{temp[,j] = as.numeric(temp[,j])}
else
{temp[,j] = factor(temp[,j])}
}
AHA.IT13.CMS.cah2.nonfed =temp
data0 = AHA.IT13.CMS.cah2.nonfed
model.bin(y.name="CM9",parmax=50)
model.num(y.name="CM1",RunMixed=FALSE)
source("~/Documents/Johns Hopkins SPH/Research/EHRS_MU/code/functions.R")
setwd("~/Documents/Johns Hopkins SPH/Research/EHRS_MU/data")
load("~/Documents/Johns Hopkins SPH/Research/EHRS_MU/data/AHA.Attest.Rda")
source("~/Documents/Johns Hopkins SPH/Research/EHRS_MU/code/functions.R")
library(glmnet)
library(sandwich)
library(glmmML)
library(pROC)
set.seed(200)
Y = matrix(AHA.Attest.cah2$Attest)
X = model.matrix(~.-1-AHAID-Attest-MSTATE, data = AHA.Attest.cah2) ###########################
data0 = AHA.Attest.cah2
fit9.1 = glmnet(x=X,y=Y,family="binomial")
#plot(fit9.1)
print("Variable Selection based on Cross-Validated AUC")
cvfit9.1 = cv.glmnet(x=X, y=Y,family="binomial",type.measure = "auc",nfolds=10)
#plot(cvfit9.1)
print("Optimal Penalization Coefficient")
print(cvfit9.1$lambda.min)
tmp = coef(cvfit9.1, s = "lambda.min")
tmp2 = rownames(tmp)[which(tmp[,1]!=0.0)]
fit1.1 = glm(as.formula(paste("Attest~",makeformula(tmp2))),data=AHA.Attest.cah2,family=quasibinomial)
table.glm(fit1.1)
source("~/Documents/Johns Hopkins SPH/Research/EHRS_MU/code/functions.R")
source("~/Documents/Johns Hopkins SPH/Research/EHRS_MU/code/functions.R")
fit1.1 = glm(as.formula(paste("Attest~",makeformula(tmp2))),data=AHA.Attest.cah2,family=quasibinomial)
table.glm(fit1.1)
getwd()
cwd = getwd()
setwd(cwd)
paste(cwd,"/AHA.Attest.Rda",sep="")
load(paste(cwd,"/AHA.Attest.Rda",sep=""))
paste(cwd,"/functions.R",sep="")
source(paste(cwd,"/functions.R",sep=""))
load(paste(cwd,"/AHA.Attest.Rda",sep=""))
cwd = getwd()
dir()
?system
system("pwd")
system("ls")
file.choose()
??choose
choose.dir()
parent.frame(2)$ofile
dirname()
setwd("~")
getwd
getwd()
setwd("~/Documents/JHSPH/Research/S.Zeger/LogLinearModel/Code")
